@using CustomerSupport.Models

@{
    ViewBag.Title = "Listado de Solicitudes de Servicio";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Action = "ListServiceRequest";
}

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">@ViewBag.Title</h3>
    </div>
    <div class="card-body">

        <form>

            @{
                MUserAcces perm = null;
                if (Session["Usuario"] != null)
                {
                    perm = (((MUser)Session["Usuario"])).UserAcces.Where(X => X.Action == @ViewBag.Action).FirstOrDefault();
                }
            }

            @if (perm != null)
            {
                if (perm.Create == true)
                {
                    <div class="row text-right">
                        <div class="col-md-12">
                            <div class="text-right">
                                @*<button class="btn boton_personalizado" onclick="location.href='@Url.Action("Create", "User")';return false;"><i class="fas fa-user-plus"></i> Agregar</button>*@
                                @*<a href="location.href='@Url.Action("AddUser", "User")';return false;" class="white_btn">Agregar</a>*@
                                <button class="white_btn" onclick="location.href='@Url.Action("AddServiceRequest", "ServiceRequest")';return false;">Agregar</button>
                            </div>
                        </div>
                    </div>
                }
            }

            <div class="table-responsive">
                <div class="container">
                    <table id="TPerson" class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Numero</th>
                                <th>Servicio</th>
                                <th>Nombre</th>
                                <th>Apellido</th>
                                <th>Fecha Registro</th>
                                <th>Estado</th>
                                @if (perm != null)
                                {
                                    if (perm.Search == true || perm.Edit == true)
                                    {
                                        <th class="text-center" colspan="2">Opciones</th>
                                    }
                                }
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>

        </form>

    </div>
</div>

@section Scripts {
    <script scr="~/Content/assets/js/moment.min.js"></script>
    <script src="~/Content/assets/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
    <script scr="~/Content/assets/js/dataTables.dateTime.min.js"></script>
    <script>

          var Permis = @Html.Raw(Json.Encode(perm));
        Buscar = Permis.Search;
        Editar = Permis.Edit;

        // Date renderer for DataTables from cdn.datatables.net/plug-ins/1.10.21/dataRender/datetime.js
        $.fn.dataTable.render.moment = function (from, to, locale) {
            // Argument shifting
            debugger;
            if (arguments.length === 1) {
                locale = 'en';
                to = from;
                from = 'YYYY-MM-DD';
            }
            else if (arguments.length === 2) {
                locale = 'en';
            }

            return function (d, type, row) {
                if (!d) {
                    return type === 'sort' || type === 'type' ? 0 : d;
                }

                var m = window.moment(d, from, locale, true);

                // Order and type get a number value from Moment, everything else
                // sees the rendered value
                return m.format(type === 'sort' || type === 'type' ? 'x' : to);
            };
        };


    var table = $('#TPerson').DataTable({

            'ajax': {
                'url': '@Url.Action("GetListServiceRequest", "ServiceRequest")',
                'type': 'GET',
                'dataType': 'json',
                'dataSrc': ''
            },
            'columns':
                [
                    { 'data': 'IdServiceRequest', 'autowidth': true },
                    { 'data': 'ServiceType', 'autowidth': true },
                    { 'data': 'PersonClient.Name', 'autowidth': true },
                    { 'data': 'PersonClient.LastName', 'autowidth': true },
                    { 'data': 'RegisterDate', 'render': '$.fn.dataTable.render.moment("M/D/YYYY")' ,'autowidth': true },
                    { 'data': 'ServiceStatus', 'autowidth': true },
                    {
                        'data': null, render: function (data, type, row) {
                            if (data != null) {
                                if (row.IdPerson == null) {
                                    return '';
                                } else {
                                    return '<div class="btn_option pt-0"><a class="editRow"><i class="fas fa-edit"></i></a></div>';
                                }
                            }
                        }, 'autowidth': true
                    },
                    {
                        'data': null, render: function (data, type, row) {
                            if (data != null) {
                                if (row.IdPerson == null) {
                                    return '';
                                } else {
                                    return '<div class="btn_option pt-0"><a class="searchRow"><i class="fas fa-search"></i></a></div>';
                                }
                            }
                        }, 'autowidth': true
                    },

                    //{
                    //    'data': null, render: function (data, type, row) {
                    //        //debugger;
                    //        if (data != null) {
                    //            if (row.IdPerson == null) {
                    //                return '';
                    //            } else {
                    //                return '<div class="btn_option pt-0"><a class="deleteRow"><i class="far fa-trash-alt"></i></a></div>';
                    //            }
                    //        }
                    //    }, 'autowidth': true
                    //}
                ],
                "columnDefs":
                    [
                        {"targets": 0,"orderable": false },
                        { "targets": 6, "bVisible": Editar },
                        { "targets": 7, "bVisible": Buscar }
                    ],
            "bAutoWidth": false,
            "bInfo": false,
            "language": {
                "sProcessing": "Procesando...",
                "sLengthMenu": "Mostrar _MENU_ registros",
                "sZeroRecords": "No se encontraron resultados",
                "sEmptyTable": "No existen Registros",
                "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                "sInfoPostFix": "",
                "sSearch": "Buscar:",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst": "Primero",
                    "sLast": "Último",
                    "sNext": "Siguiente",
                    "sPrevious": "Anterior"
                },
                "oAria": {
                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                }
            }

    });

    </script>
}
